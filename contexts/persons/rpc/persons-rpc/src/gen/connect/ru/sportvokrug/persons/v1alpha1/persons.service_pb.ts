// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file ru/sportvokrug/persons/v1alpha1/persons.service.proto (package ru.sportvokrug.persons.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { Timestamp }              from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'

/**
 * @generated from enum ru.sportvokrug.persons.v1alpha1.Gender
 */
export enum Gender {
  /**
   * @generated from enum value: MALE = 0;
   */
  MALE = 0,

  /**
   * @generated from enum value: FEMALE = 1;
   */
  FEMALE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Gender)
proto3.util.setEnumType(Gender, 'ru.sportvokrug.persons.v1alpha1.Gender', [
  { no: 0, name: 'MALE' },
  { no: 1, name: 'FEMALE' },
])

/**
 * @generated from enum ru.sportvokrug.persons.v1alpha1.SportsmanRank
 */
export enum SportsmanRank {
  /**
   * @generated from enum value: NOT_SPECIFIED = 0;
   */
  NOT_SPECIFIED = 0,

  /**
   * @generated from enum value: NO_RANK = 1;
   */
  NO_RANK = 1,

  /**
   * @generated from enum value: THIRD_YOUTH = 2;
   */
  THIRD_YOUTH = 2,

  /**
   * @generated from enum value: SECOND_YOUTH = 3;
   */
  SECOND_YOUTH = 3,

  /**
   * @generated from enum value: FIRST_YOUTH = 4;
   */
  FIRST_YOUTH = 4,

  /**
   * @generated from enum value: THIRD_SPORTS = 5;
   */
  THIRD_SPORTS = 5,

  /**
   * @generated from enum value: SECOND_SPORTS = 6;
   */
  SECOND_SPORTS = 6,

  /**
   * @generated from enum value: FIRST_SPORTS = 7;
   */
  FIRST_SPORTS = 7,

  /**
   * @generated from enum value: CANDIDATE_MASTER_OF_SPORTS = 8;
   */
  CANDIDATE_MASTER_OF_SPORTS = 8,

  /**
   * @generated from enum value: MASTER_OF_SPORTS = 9;
   */
  MASTER_OF_SPORTS = 9,

  /**
   * @generated from enum value: INTERNATIONAL_MASTER_OF_SPORTS = 10;
   */
  INTERNATIONAL_MASTER_OF_SPORTS = 10,

  /**
   * @generated from enum value: HONORED_MASTER_OF_SPORTS = 11;
   */
  HONORED_MASTER_OF_SPORTS = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(SportsmanRank)
proto3.util.setEnumType(SportsmanRank, 'ru.sportvokrug.persons.v1alpha1.SportsmanRank', [
  { no: 0, name: 'NOT_SPECIFIED' },
  { no: 1, name: 'NO_RANK' },
  { no: 2, name: 'THIRD_YOUTH' },
  { no: 3, name: 'SECOND_YOUTH' },
  { no: 4, name: 'FIRST_YOUTH' },
  { no: 5, name: 'THIRD_SPORTS' },
  { no: 6, name: 'SECOND_SPORTS' },
  { no: 7, name: 'FIRST_SPORTS' },
  { no: 8, name: 'CANDIDATE_MASTER_OF_SPORTS' },
  { no: 9, name: 'MASTER_OF_SPORTS' },
  { no: 10, name: 'INTERNATIONAL_MASTER_OF_SPORTS' },
  { no: 11, name: 'HONORED_MASTER_OF_SPORTS' },
])

/**
 * @generated from enum ru.sportvokrug.persons.v1alpha1.JudgeRank
 */
export enum JudgeRank {
  /**
   * @generated from enum value: SPORTS_JUDGE_THIRD_CATEGORY = 0;
   */
  SPORTS_JUDGE_THIRD_CATEGORY = 0,

  /**
   * @generated from enum value: SPORTS_JUDGE_SECOND_CATEGORY = 1;
   */
  SPORTS_JUDGE_SECOND_CATEGORY = 1,

  /**
   * @generated from enum value: SPORTS_JUDGE_FIRST_CATEGORY = 2;
   */
  SPORTS_JUDGE_FIRST_CATEGORY = 2,

  /**
   * @generated from enum value: SPORTS_JUDGE_ALL_RUSSIAN_CATEGORY = 3;
   */
  SPORTS_JUDGE_ALL_RUSSIAN_CATEGORY = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(JudgeRank)
proto3.util.setEnumType(JudgeRank, 'ru.sportvokrug.persons.v1alpha1.JudgeRank', [
  { no: 0, name: 'SPORTS_JUDGE_THIRD_CATEGORY' },
  { no: 1, name: 'SPORTS_JUDGE_SECOND_CATEGORY' },
  { no: 2, name: 'SPORTS_JUDGE_FIRST_CATEGORY' },
  { no: 3, name: 'SPORTS_JUDGE_ALL_RUSSIAN_CATEGORY' },
])

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.Person
 */
export class Person extends Message<Person> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string first_name = 2;
   */
  firstName = ''

  /**
   * @generated from field: string last_name = 3;
   */
  lastName = ''

  /**
   * @generated from field: string patronymic = 4;
   */
  patronymic = ''

  /**
   * @generated from field: ru.sportvokrug.persons.v1alpha1.Gender gender = 5;
   */
  gender = Gender.MALE

  /**
   * @generated from field: google.protobuf.Timestamp birthday = 6;
   */
  birthday?: Timestamp

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp

  constructor(data?: PartialMessage<Person>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.Person'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'first_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'last_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'patronymic', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'gender', kind: 'enum', T: proto3.getEnumType(Gender) },
    { no: 6, name: 'birthday', kind: 'message', T: Timestamp },
    { no: 7, name: 'created_at', kind: 'message', T: Timestamp },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Person {
    return new Person().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Person {
    return new Person().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Person {
    return new Person().fromJsonString(jsonString, options)
  }

  static equals(
    a: Person | PlainMessage<Person> | undefined,
    b: Person | PlainMessage<Person> | undefined
  ): boolean {
    return proto3.util.equals(Person, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.Coach
 */
export class Coach extends Message<Coach> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string person_id = 2;
   */
  personId = ''

  /**
   * @generated from field: bool is_honored = 3;
   */
  isHonored = false

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp

  constructor(data?: PartialMessage<Coach>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.Coach'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'person_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'is_honored', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: 'created_at', kind: 'message', T: Timestamp },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Coach {
    return new Coach().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Coach {
    return new Coach().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Coach {
    return new Coach().fromJsonString(jsonString, options)
  }

  static equals(
    a: Coach | PlainMessage<Coach> | undefined,
    b: Coach | PlainMessage<Coach> | undefined
  ): boolean {
    return proto3.util.equals(Coach, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.FigureSkatingSportsman
 */
export class FigureSkatingSportsman extends Message<FigureSkatingSportsman> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string person_id = 2;
   */
  personId = ''

  /**
   * @generated from field: ru.sportvokrug.persons.v1alpha1.SportsmanRank rank = 3;
   */
  rank = SportsmanRank.NOT_SPECIFIED

  /**
   * @generated from field: google.protobuf.Timestamp rank_assign_date = 4;
   */
  rankAssignDate?: Timestamp

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp

  constructor(data?: PartialMessage<FigureSkatingSportsman>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.FigureSkatingSportsman'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'person_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'rank', kind: 'enum', T: proto3.getEnumType(SportsmanRank) },
    { no: 4, name: 'rank_assign_date', kind: 'message', T: Timestamp },
    { no: 5, name: 'created_at', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): FigureSkatingSportsman {
    return new FigureSkatingSportsman().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): FigureSkatingSportsman {
    return new FigureSkatingSportsman().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): FigureSkatingSportsman {
    return new FigureSkatingSportsman().fromJsonString(jsonString, options)
  }

  static equals(
    a: FigureSkatingSportsman | PlainMessage<FigureSkatingSportsman> | undefined,
    b: FigureSkatingSportsman | PlainMessage<FigureSkatingSportsman> | undefined
  ): boolean {
    return proto3.util.equals(FigureSkatingSportsman, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.FigureSkatingJudge
 */
export class FigureSkatingJudge extends Message<FigureSkatingJudge> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string person_id = 2;
   */
  personId = ''

  /**
   * @generated from field: ru.sportvokrug.persons.v1alpha1.JudgeRank rank = 3;
   */
  rank = JudgeRank.SPORTS_JUDGE_THIRD_CATEGORY

  /**
   * @generated from field: google.protobuf.Timestamp rank_order_date = 4;
   */
  rankOrderDate?: Timestamp

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp

  constructor(data?: PartialMessage<FigureSkatingJudge>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.FigureSkatingJudge'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'person_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'rank', kind: 'enum', T: proto3.getEnumType(JudgeRank) },
    { no: 4, name: 'rank_order_date', kind: 'message', T: Timestamp },
    { no: 5, name: 'created_at', kind: 'message', T: Timestamp },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FigureSkatingJudge {
    return new FigureSkatingJudge().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FigureSkatingJudge {
    return new FigureSkatingJudge().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): FigureSkatingJudge {
    return new FigureSkatingJudge().fromJsonString(jsonString, options)
  }

  static equals(
    a: FigureSkatingJudge | PlainMessage<FigureSkatingJudge> | undefined,
    b: FigureSkatingJudge | PlainMessage<FigureSkatingJudge> | undefined
  ): boolean {
    return proto3.util.equals(FigureSkatingJudge, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.CreatePersonRequest
 */
export class CreatePersonRequest extends Message<CreatePersonRequest> {
  /**
   * @generated from field: string first_name = 1;
   */
  firstName = ''

  /**
   * @generated from field: string last_name = 2;
   */
  lastName = ''

  /**
   * @generated from field: string patronymic = 3;
   */
  patronymic = ''

  /**
   * @generated from field: ru.sportvokrug.persons.v1alpha1.Gender gender = 4;
   */
  gender = Gender.MALE

  /**
   * @generated from field: google.protobuf.Timestamp birthday = 5;
   */
  birthday?: Timestamp

  constructor(data?: PartialMessage<CreatePersonRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.CreatePersonRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'first_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'last_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'patronymic', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'gender', kind: 'enum', T: proto3.getEnumType(Gender) },
    { no: 5, name: 'birthday', kind: 'message', T: Timestamp },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePersonRequest {
    return new CreatePersonRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePersonRequest {
    return new CreatePersonRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreatePersonRequest {
    return new CreatePersonRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreatePersonRequest | PlainMessage<CreatePersonRequest> | undefined,
    b: CreatePersonRequest | PlainMessage<CreatePersonRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreatePersonRequest, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.CreatePersonResponse
 */
export class CreatePersonResponse extends Message<CreatePersonResponse> {
  /**
   * @generated from field: ru.sportvokrug.persons.v1alpha1.Person person = 1;
   */
  person?: Person

  constructor(data?: PartialMessage<CreatePersonResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.CreatePersonResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'person', kind: 'message', T: Person },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePersonResponse {
    return new CreatePersonResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePersonResponse {
    return new CreatePersonResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreatePersonResponse {
    return new CreatePersonResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreatePersonResponse | PlainMessage<CreatePersonResponse> | undefined,
    b: CreatePersonResponse | PlainMessage<CreatePersonResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreatePersonResponse, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.UpdatePersonRequest
 */
export class UpdatePersonRequest extends Message<UpdatePersonRequest> {
  /**
   * @generated from field: string person_id = 1;
   */
  personId = ''

  /**
   * @generated from field: string first_name = 2;
   */
  firstName = ''

  /**
   * @generated from field: string last_name = 3;
   */
  lastName = ''

  /**
   * @generated from field: string patronymic = 4;
   */
  patronymic = ''

  /**
   * @generated from field: ru.sportvokrug.persons.v1alpha1.Gender gender = 5;
   */
  gender = Gender.MALE

  /**
   * @generated from field: google.protobuf.Timestamp birthday = 6;
   */
  birthday?: Timestamp

  constructor(data?: PartialMessage<UpdatePersonRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.UpdatePersonRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'person_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'first_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'last_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'patronymic', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'gender', kind: 'enum', T: proto3.getEnumType(Gender) },
    { no: 6, name: 'birthday', kind: 'message', T: Timestamp },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePersonRequest {
    return new UpdatePersonRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePersonRequest {
    return new UpdatePersonRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdatePersonRequest {
    return new UpdatePersonRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdatePersonRequest | PlainMessage<UpdatePersonRequest> | undefined,
    b: UpdatePersonRequest | PlainMessage<UpdatePersonRequest> | undefined
  ): boolean {
    return proto3.util.equals(UpdatePersonRequest, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.UpdatePersonResponse
 */
export class UpdatePersonResponse extends Message<UpdatePersonResponse> {
  /**
   * @generated from field: ru.sportvokrug.persons.v1alpha1.Person person = 1;
   */
  person?: Person

  constructor(data?: PartialMessage<UpdatePersonResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.UpdatePersonResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'person', kind: 'message', T: Person },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePersonResponse {
    return new UpdatePersonResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePersonResponse {
    return new UpdatePersonResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdatePersonResponse {
    return new UpdatePersonResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdatePersonResponse | PlainMessage<UpdatePersonResponse> | undefined,
    b: UpdatePersonResponse | PlainMessage<UpdatePersonResponse> | undefined
  ): boolean {
    return proto3.util.equals(UpdatePersonResponse, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.CreateCoachRequest
 */
export class CreateCoachRequest extends Message<CreateCoachRequest> {
  /**
   * @generated from field: string person_id = 1;
   */
  personId = ''

  /**
   * @generated from field: bool is_honored = 2;
   */
  isHonored = false

  constructor(data?: PartialMessage<CreateCoachRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.CreateCoachRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'person_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'is_honored', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCoachRequest {
    return new CreateCoachRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCoachRequest {
    return new CreateCoachRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateCoachRequest {
    return new CreateCoachRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateCoachRequest | PlainMessage<CreateCoachRequest> | undefined,
    b: CreateCoachRequest | PlainMessage<CreateCoachRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateCoachRequest, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.CreateCoachResponse
 */
export class CreateCoachResponse extends Message<CreateCoachResponse> {
  /**
   * @generated from field: ru.sportvokrug.persons.v1alpha1.Coach coach = 1;
   */
  coach?: Coach

  constructor(data?: PartialMessage<CreateCoachResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.CreateCoachResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'coach', kind: 'message', T: Coach },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCoachResponse {
    return new CreateCoachResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCoachResponse {
    return new CreateCoachResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateCoachResponse {
    return new CreateCoachResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateCoachResponse | PlainMessage<CreateCoachResponse> | undefined,
    b: CreateCoachResponse | PlainMessage<CreateCoachResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreateCoachResponse, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.UpdateCoachRequest
 */
export class UpdateCoachRequest extends Message<UpdateCoachRequest> {
  /**
   * @generated from field: string coach_id = 1;
   */
  coachId = ''

  /**
   * @generated from field: bool is_honored = 2;
   */
  isHonored = false

  constructor(data?: PartialMessage<UpdateCoachRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.UpdateCoachRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'coach_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'is_honored', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCoachRequest {
    return new UpdateCoachRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCoachRequest {
    return new UpdateCoachRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateCoachRequest {
    return new UpdateCoachRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdateCoachRequest | PlainMessage<UpdateCoachRequest> | undefined,
    b: UpdateCoachRequest | PlainMessage<UpdateCoachRequest> | undefined
  ): boolean {
    return proto3.util.equals(UpdateCoachRequest, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.UpdateCoachResponse
 */
export class UpdateCoachResponse extends Message<UpdateCoachResponse> {
  /**
   * @generated from field: ru.sportvokrug.persons.v1alpha1.Coach coach = 1;
   */
  coach?: Coach

  constructor(data?: PartialMessage<UpdateCoachResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.UpdateCoachResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'coach', kind: 'message', T: Coach },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCoachResponse {
    return new UpdateCoachResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCoachResponse {
    return new UpdateCoachResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateCoachResponse {
    return new UpdateCoachResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdateCoachResponse | PlainMessage<UpdateCoachResponse> | undefined,
    b: UpdateCoachResponse | PlainMessage<UpdateCoachResponse> | undefined
  ): boolean {
    return proto3.util.equals(UpdateCoachResponse, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.CreateFigureSkatingSportsmanRequest
 */
export class CreateFigureSkatingSportsmanRequest extends Message<CreateFigureSkatingSportsmanRequest> {
  /**
   * @generated from field: string person_id = 1;
   */
  personId = ''

  /**
   * @generated from field: ru.sportvokrug.persons.v1alpha1.SportsmanRank rank = 2;
   */
  rank = SportsmanRank.NOT_SPECIFIED

  /**
   * @generated from field: google.protobuf.Timestamp rank_assign_date = 3;
   */
  rankAssignDate?: Timestamp

  constructor(data?: PartialMessage<CreateFigureSkatingSportsmanRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.CreateFigureSkatingSportsmanRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'person_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rank', kind: 'enum', T: proto3.getEnumType(SportsmanRank) },
    { no: 3, name: 'rank_assign_date', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateFigureSkatingSportsmanRequest {
    return new CreateFigureSkatingSportsmanRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateFigureSkatingSportsmanRequest {
    return new CreateFigureSkatingSportsmanRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateFigureSkatingSportsmanRequest {
    return new CreateFigureSkatingSportsmanRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateFigureSkatingSportsmanRequest
      | PlainMessage<CreateFigureSkatingSportsmanRequest>
      | undefined,
    b:
      | CreateFigureSkatingSportsmanRequest
      | PlainMessage<CreateFigureSkatingSportsmanRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateFigureSkatingSportsmanRequest, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.CreateFigureSkatingSportsmanResponse
 */
export class CreateFigureSkatingSportsmanResponse extends Message<CreateFigureSkatingSportsmanResponse> {
  /**
   * @generated from field: ru.sportvokrug.persons.v1alpha1.FigureSkatingSportsman sportsman = 1;
   */
  sportsman?: FigureSkatingSportsman

  constructor(data?: PartialMessage<CreateFigureSkatingSportsmanResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.CreateFigureSkatingSportsmanResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'sportsman', kind: 'message', T: FigureSkatingSportsman },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateFigureSkatingSportsmanResponse {
    return new CreateFigureSkatingSportsmanResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateFigureSkatingSportsmanResponse {
    return new CreateFigureSkatingSportsmanResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateFigureSkatingSportsmanResponse {
    return new CreateFigureSkatingSportsmanResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateFigureSkatingSportsmanResponse
      | PlainMessage<CreateFigureSkatingSportsmanResponse>
      | undefined,
    b:
      | CreateFigureSkatingSportsmanResponse
      | PlainMessage<CreateFigureSkatingSportsmanResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(CreateFigureSkatingSportsmanResponse, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.UpdateFigureSkatingSportsmanRequest
 */
export class UpdateFigureSkatingSportsmanRequest extends Message<UpdateFigureSkatingSportsmanRequest> {
  /**
   * @generated from field: string sportsman_id = 1;
   */
  sportsmanId = ''

  /**
   * @generated from field: ru.sportvokrug.persons.v1alpha1.SportsmanRank rank = 2;
   */
  rank = SportsmanRank.NOT_SPECIFIED

  /**
   * @generated from field: google.protobuf.Timestamp rank_assign_date = 3;
   */
  rankAssignDate?: Timestamp

  constructor(data?: PartialMessage<UpdateFigureSkatingSportsmanRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.UpdateFigureSkatingSportsmanRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'sportsman_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rank', kind: 'enum', T: proto3.getEnumType(SportsmanRank) },
    { no: 3, name: 'rank_assign_date', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateFigureSkatingSportsmanRequest {
    return new UpdateFigureSkatingSportsmanRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateFigureSkatingSportsmanRequest {
    return new UpdateFigureSkatingSportsmanRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateFigureSkatingSportsmanRequest {
    return new UpdateFigureSkatingSportsmanRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateFigureSkatingSportsmanRequest
      | PlainMessage<UpdateFigureSkatingSportsmanRequest>
      | undefined,
    b:
      | UpdateFigureSkatingSportsmanRequest
      | PlainMessage<UpdateFigureSkatingSportsmanRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(UpdateFigureSkatingSportsmanRequest, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.UpdateFigureSkatingSportsmanResponse
 */
export class UpdateFigureSkatingSportsmanResponse extends Message<UpdateFigureSkatingSportsmanResponse> {
  /**
   * @generated from field: ru.sportvokrug.persons.v1alpha1.FigureSkatingSportsman sportsman = 1;
   */
  sportsman?: FigureSkatingSportsman

  constructor(data?: PartialMessage<UpdateFigureSkatingSportsmanResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.UpdateFigureSkatingSportsmanResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'sportsman', kind: 'message', T: FigureSkatingSportsman },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateFigureSkatingSportsmanResponse {
    return new UpdateFigureSkatingSportsmanResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateFigureSkatingSportsmanResponse {
    return new UpdateFigureSkatingSportsmanResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateFigureSkatingSportsmanResponse {
    return new UpdateFigureSkatingSportsmanResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateFigureSkatingSportsmanResponse
      | PlainMessage<UpdateFigureSkatingSportsmanResponse>
      | undefined,
    b:
      | UpdateFigureSkatingSportsmanResponse
      | PlainMessage<UpdateFigureSkatingSportsmanResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(UpdateFigureSkatingSportsmanResponse, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.CreateFigureSkatingJudgeRequest
 */
export class CreateFigureSkatingJudgeRequest extends Message<CreateFigureSkatingJudgeRequest> {
  /**
   * @generated from field: string person_id = 1;
   */
  personId = ''

  /**
   * @generated from field: ru.sportvokrug.persons.v1alpha1.JudgeRank rank = 2;
   */
  rank = JudgeRank.SPORTS_JUDGE_THIRD_CATEGORY

  /**
   * @generated from field: google.protobuf.Timestamp rank_order_date = 3;
   */
  rankOrderDate?: Timestamp

  constructor(data?: PartialMessage<CreateFigureSkatingJudgeRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.CreateFigureSkatingJudgeRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'person_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rank', kind: 'enum', T: proto3.getEnumType(JudgeRank) },
    { no: 3, name: 'rank_order_date', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateFigureSkatingJudgeRequest {
    return new CreateFigureSkatingJudgeRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateFigureSkatingJudgeRequest {
    return new CreateFigureSkatingJudgeRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateFigureSkatingJudgeRequest {
    return new CreateFigureSkatingJudgeRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateFigureSkatingJudgeRequest | PlainMessage<CreateFigureSkatingJudgeRequest> | undefined,
    b: CreateFigureSkatingJudgeRequest | PlainMessage<CreateFigureSkatingJudgeRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateFigureSkatingJudgeRequest, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.CreateFigureSkatingJudgeResponse
 */
export class CreateFigureSkatingJudgeResponse extends Message<CreateFigureSkatingJudgeResponse> {
  /**
   * @generated from field: ru.sportvokrug.persons.v1alpha1.FigureSkatingJudge judge = 1;
   */
  judge?: FigureSkatingJudge

  constructor(data?: PartialMessage<CreateFigureSkatingJudgeResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.CreateFigureSkatingJudgeResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'judge', kind: 'message', T: FigureSkatingJudge },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateFigureSkatingJudgeResponse {
    return new CreateFigureSkatingJudgeResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateFigureSkatingJudgeResponse {
    return new CreateFigureSkatingJudgeResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateFigureSkatingJudgeResponse {
    return new CreateFigureSkatingJudgeResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CreateFigureSkatingJudgeResponse
      | PlainMessage<CreateFigureSkatingJudgeResponse>
      | undefined,
    b: CreateFigureSkatingJudgeResponse | PlainMessage<CreateFigureSkatingJudgeResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreateFigureSkatingJudgeResponse, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.UpdateFigureSkatingJudgeRequest
 */
export class UpdateFigureSkatingJudgeRequest extends Message<UpdateFigureSkatingJudgeRequest> {
  /**
   * @generated from field: string judge_id = 1;
   */
  judgeId = ''

  /**
   * @generated from field: ru.sportvokrug.persons.v1alpha1.JudgeRank rank = 2;
   */
  rank = JudgeRank.SPORTS_JUDGE_THIRD_CATEGORY

  /**
   * @generated from field: google.protobuf.Timestamp rank_order_date = 3;
   */
  rankOrderDate?: Timestamp

  constructor(data?: PartialMessage<UpdateFigureSkatingJudgeRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.UpdateFigureSkatingJudgeRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'judge_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'rank', kind: 'enum', T: proto3.getEnumType(JudgeRank) },
    { no: 3, name: 'rank_order_date', kind: 'message', T: Timestamp },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateFigureSkatingJudgeRequest {
    return new UpdateFigureSkatingJudgeRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateFigureSkatingJudgeRequest {
    return new UpdateFigureSkatingJudgeRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateFigureSkatingJudgeRequest {
    return new UpdateFigureSkatingJudgeRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: UpdateFigureSkatingJudgeRequest | PlainMessage<UpdateFigureSkatingJudgeRequest> | undefined,
    b: UpdateFigureSkatingJudgeRequest | PlainMessage<UpdateFigureSkatingJudgeRequest> | undefined
  ): boolean {
    return proto3.util.equals(UpdateFigureSkatingJudgeRequest, a, b)
  }
}

/**
 * @generated from message ru.sportvokrug.persons.v1alpha1.UpdateFigureSkatingJudgeResponse
 */
export class UpdateFigureSkatingJudgeResponse extends Message<UpdateFigureSkatingJudgeResponse> {
  /**
   * @generated from field: ru.sportvokrug.persons.v1alpha1.FigureSkatingJudge judge = 1;
   */
  judge?: FigureSkatingJudge

  constructor(data?: PartialMessage<UpdateFigureSkatingJudgeResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'ru.sportvokrug.persons.v1alpha1.UpdateFigureSkatingJudgeResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'judge', kind: 'message', T: FigureSkatingJudge },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): UpdateFigureSkatingJudgeResponse {
    return new UpdateFigureSkatingJudgeResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): UpdateFigureSkatingJudgeResponse {
    return new UpdateFigureSkatingJudgeResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateFigureSkatingJudgeResponse {
    return new UpdateFigureSkatingJudgeResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | UpdateFigureSkatingJudgeResponse
      | PlainMessage<UpdateFigureSkatingJudgeResponse>
      | undefined,
    b: UpdateFigureSkatingJudgeResponse | PlainMessage<UpdateFigureSkatingJudgeResponse> | undefined
  ): boolean {
    return proto3.util.equals(UpdateFigureSkatingJudgeResponse, a, b)
  }
}
